import telebot
import urllib.parse
import requests

BOT_TOKEN = "7740852398:AAF-D1841q9RI8GzYiXCPRhmE8ttxVB1c_Q"

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø WorkLifeBalanceBot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "üîπ –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤—Ä–æ–¥–µ:\n"
        "   - '–ü–æ—Å—Ç–∞–≤—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
        "   - '–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –¥–æ –ø—è—Ç–Ω–∏—Ü—ã'\n\n"
        "üìå –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Calendar –∏ Todoist –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setup.\n"
        "‚ÑπÔ∏è –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏ /help."
    )
    bot.send_message(message.chat.id, welcome_message)

GOOGLE_CLIENT_ID = "748744852574-45frt4u5ns45rq09a9cn3nbiok7tkd60"
TODOIST_CLIENT_ID = "4024b907332d49d687f0556c336681e7"
GOOGLE_CLIENT_SECRET = "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"
TODOIST_CLIENT_SECRET = "e8d27c11d3094ef39be6b2e5a68357dc"
REDIRECT_URI = "http://127.0.0.1:5000"

user_data = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def save_user_token(chat_id, key, token):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id][key] = token


def get_user_token(chat_id, key):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    return user_data.get(chat_id, {}).get(key)


def generate_google_auth_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Google."""
    base_url = "https://accounts.google.com/o/oauth2/v2/auth"
    params = {
        "client_id": GOOGLE_CLIENT_ID,
        "redirect_uri": REDIRECT_URI,
        "response_type": "code",
        "scope": "https://www.googleapis.com/auth/calendar",
        "access_type": "offline",
        "prompt": "consent",
    }
    return f"{base_url}?{urllib.parse.urlencode(params)}"


def generate_todoist_auth_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Todoist."""
    base_url = "https://todoist.com/oauth/authorize"
    params = {
        "client_id": TODOIST_CLIENT_ID,
        "scope": "data:read_write",
        "redirect_uri": REDIRECT_URI,
    }
    return f"{base_url}?{urllib.parse.urlencode(params)}"


def exchange_google_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ Google –Ω–∞ —Ç–æ–∫–µ–Ω."""
    url = "https://oauth2.googleapis.com/token"
    data = {
        "code": code,
        "client_id": GOOGLE_CLIENT_ID,
        "client_secret": GOOGLE_CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI,
        "grant_type": "authorization_code",
    }
    response = requests.post(url, data=data)
    return response.json().get("access_token")


def exchange_todoist_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ Todoist –Ω–∞ —Ç–æ–∫–µ–Ω."""
    url = "https://todoist.com/oauth/access_token"
    data = {
        "code": code,
        "client_id": TODOIST_CLIENT_ID,
        "client_secret": TODOIST_CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI,
    }
    response = requests.post(url, data=data)
    return response.json().get("access_token")


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

@bot.message_handler(commands=['setup'])
def setup(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /setup."""
    google_auth_url = generate_google_auth_url()
    todoist_auth_url = generate_todoist_auth_url()

    setup_message = (
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        "1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google: [–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google]({google_url})\n"
        "2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Todoist: [–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Todoist]({todoist_url})\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥—ã. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "- `Google: –≤–∞—à_–∫–æ–¥`\n"
        "- `Todoist: –≤–∞—à_–∫–æ–¥`."
    )

    bot.send_message(
        message.chat.id,
        setup_message.format(google_url=google_auth_url, todoist_url=todoist_auth_url),
        parse_mode="Markdown",
    )


@bot.message_handler(func=lambda message: True)
def handle_code(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤."""
    if message.text.startswith("Google:"):
        google_code = message.text.split("Google:")[1].strip()
        google_token = exchange_google_code_for_token(google_code)
        if google_token:
            save_user_token(message.chat.id, "google_token", google_token)
            bot.send_message(message.chat.id, "Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Google.")
    elif message.text.startswith("Todoist:"):
        todoist_code = message.text.split("Todoist:")[1].strip()
        todoist_token = exchange_todoist_code_for_token(todoist_code)
        if todoist_token:
            save_user_token(message.chat.id, "todoist_token", todoist_token)
            bot.send_message(message.chat.id, "Todoist –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Todoist.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(commands=['check_tokens'])
def check_tokens(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    google_token = get_user_token(message.chat.id, "google_token")
    todoist_token = get_user_token(message.chat.id, "todoist_token")

    if google_token or todoist_token:
        response = "–í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:\n"
        if google_token:
            response += f"üîπ Google: {google_token}\n"
        if todoist_token:
            response += f"üîπ Todoist: {todoist_token}\n"
    else:
        response = "–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /setup."

    bot.send_message(message.chat.id, response)

from fastapi import FastAPI, Request

app = FastAPI()

@app.get("/callback")
async def callback(request: Request):
    code = request.query_params.get("code")
    if code:
        token = exchange_google_code_for_token(code)
        return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!"}
    return {"message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}, 400


# ===== –ó–ê–ü–£–°–ö  =====
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
