from datetime import datetime, timezone, timedelta
import googleapi
import telebot
import todoistapi
import urllib.parse
import re
import requests
from fastapi import FastAPI, Request
import threading
import uvicorn
import json
from config import BOT_TOKEN, REDIRECT_URI, GOOGLE_CLIENT_ID, TODOIST_CLIENT_ID, GOOGLE_CLIENT_SECRET, TODOIST_CLIENT_SECRET, YANDEX_IAM_TOKEN, FOLDER_ID

from const import (
    HTTP_OK,
    HTTP_NO_CONTENT,
    MODEL_URI,
    DEFAULT_COMPLETION_OPTIONS,
    SYSTEM_MESSAGE_GOOGLE,
    SYSTEM_MESSAGE_TODOIST,
    DELTA_TOMORROW,
    DELTA_AFTER_TOMORROW,
    WEEKDAY_R,
    DAYS_IN_WEEK,
    MONTH_R,
    DATE_R,
    TIME_R
)


bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}
app = FastAPI()

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ========
def save_user_token(chat_id, key, token):
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id][key] = token


def get_user_token(chat_id, key):
    return user_data.get(chat_id, {}).get(key)

def generate_google_auth_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google."""
    base_url = "https://accounts.google.com/o/oauth2/v2/auth"
    params = {
        "client_id": GOOGLE_CLIENT_ID,
        "redirect_uri": REDIRECT_URI + "/google",
        "response_type": "code",
        "scope": "https://www.googleapis.com/auth/calendar",
        "access_type": "offline",
        "prompt": "consent",
    }
    return f"{base_url}?{urllib.parse.urlencode(params)}"


def generate_todoist_auth_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Todoist."""
    base_url = "https://todoist.com/oauth/authorize"
    params = {
        "client_id": TODOIST_CLIENT_ID,
        "scope": "data:read_write",
        "redirect_uri": REDIRECT_URI + "/todoist",
    }
    return f"{base_url}?{urllib.parse.urlencode(params)}"


def exchange_google_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ Google –Ω–∞ —Ç–æ–∫–µ–Ω."""
    url = "https://oauth2.googleapis.com/token"
    data = {
        "code": code,
        "client_id": GOOGLE_CLIENT_ID,
        "client_secret": GOOGLE_CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI + "/google",
        "grant_type": "authorization_code",
    }
    response = requests.post(url, data=data)
    return response.json().get("access_token")


def exchange_todoist_code_for_token(code):
    """–û–±–º–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–¥ Todoist –Ω–∞ —Ç–æ–∫–µ–Ω."""
    url = "https://todoist.com/oauth/access_token"
    data = {
        "code": code,
        "client_id": TODOIST_CLIENT_ID,
        "client_secret": TODOIST_CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI + "/todoist",
    }
    response = requests.post(url, data=data)
    return response.json().get("access_token")


# ======== Telegram Bot –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ========
@bot.message_handler(commands=['start'])
def start(message):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø WorkLifeBalanceBot. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "üîπ –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤—Ä–æ–¥–µ:\n"
        "   - '–ü–æ—Å—Ç–∞–≤—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00'\n"
        "   - '–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –¥–æ 28 –¥–µ–∫–∞–±—Ä—è'\n\n"
        "üìå –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Calendar –∏ Todoist –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setup.\n"
    )
    bot.send_message(message.chat.id, welcome_message)


@bot.message_handler(commands=['setup'])
def setup(message):
    google_auth_url = generate_google_auth_url()
    todoist_auth_url = generate_todoist_auth_url()
    setup_message = (
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
        f"1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google: [–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google]({google_auth_url})\n"
        f"2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Todoist: [–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Todoist]({todoist_auth_url})\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥—ã. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "- `Google: –≤–∞—à_–∫–æ–¥`\n"
        "- `Todoist: –≤–∞—à_–∫–æ–¥`."
    )
    bot.send_message(message.chat.id, setup_message, parse_mode="Markdown")


@bot.message_handler(func=lambda message: message.text.startswith("Google:"))
def handle_google_token(message):
    chat_id = message.chat.id
    google_token = message.text.split("Google:")[1].strip()

    if google_token:
        save_user_token(chat_id, "google_token", google_token)
        bot.send_message(chat_id, "–¢–æ–∫–µ–Ω Google —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–í–≤–µ–¥–∏—Ç–µ /add_event –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n–í–≤–µ–¥–∏—Ç–µ /list_events –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n–í–≤–µ–¥–∏—Ç–µ /delete_event –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(func=lambda message: message.text.startswith("Todoist:"))
def handle_todoist_token(message):
    chat_id = message.chat.id
    todoist_token = message.text.split("Todoist:")[1].strip()

    if todoist_token:
        save_user_token(chat_id, "todoist_token", todoist_token)
        bot.send_message(chat_id, "–¢–æ–∫–µ–Ω Todoist —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–í–≤–µ–¥–∏—Ç–µ /add_task –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n–í–≤–µ–¥–∏—Ç–µ /list_tasks –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n–í–≤–µ–¥–∏—Ç–µ /delete_task –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
    else:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω Todoist. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



# ======== FastAPI –ö–æ–ª–±—ç–∫–∏ ========


@app.get("/callback/google")
async def google_callback(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç Google."""
    code = request.query_params.get("code")
    if code:
        token = exchange_google_code_for_token(code)
        if token:
            return {"message": "Google authorisation completed!", "token": token}
        return {"message": "Google authorisation error"}
    return {"message": "Authorisation code missing"}


@app.get("/callback/todoist")
async def todoist_callback(request: Request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç Todoist."""
    code = request.query_params.get("code")
    if code:
        token = exchange_todoist_code_for_token(code)
        if token:
            return {"message": "Todoist authorisation completed!", "token": token}
        return {"message": "Todoist authorisation error"}
    return {"message": "Authorisation code missing"}


# ======== TODOIST ========
@bot.message_handler(commands=['add_task'])
def add_task(message):
    chat_id = message.chat.id
    todoist_token = get_user_token(chat_id, "todoist_token")
    if not todoist_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Todoist. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    projects = todoistapi.get_todoist_projects(todoist_token)
    if not projects or "error" in projects:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (–ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞):\n"
    for idx, project in enumerate(projects):
        response += f"{idx + 1}. {project['name']} (ID: {project['id']})\n"
    bot.send_message(chat_id, response)

    bot.register_next_step_handler(message, process_project_selection, projects)


def process_project_selection(message, projects):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞. """
    chat_id = message.chat.id
    try:
        selected_index = int(message.text.strip()) - 1
        if 0 <= selected_index < len(projects):
            selected_project_id = projects[selected_index]["id"]
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            bot.register_next_step_handler(message, process_task_creation, selected_project_id)
        else:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞.")


def process_task_creation(message, project_id):
    """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏."""
    chat_id = message.chat.id
    todoist_token = get_user_token(chat_id, "todoist_token")
    user_input = message.text.strip()

    try:
        task_details = extract_event_details(user_input, False)
        task_name = task_details["title"]
        due_string = task_details["start_time"]

        task = todoistapi.create_task_in_project(todoist_token, task_name, project_id, due_string)
        if "error" not in task:
            bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∞ '{task_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç.")
        else:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task['error']}")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def get_todoist_tasks(token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
    url = "https://api.todoist.com/rest/v2/tasks"
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(url, headers=headers)

    if response.status_code == HTTP_OK:
        return response.json()
    else:
        return {"error": response.text}


@bot.message_handler(commands=['list_tasks'])
def list_tasks(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_tasks."""
    chat_id = message.chat.id
    todoist_token = get_user_token(chat_id, "todoist_token")

    if not todoist_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Todoist. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    tasks = get_todoist_tasks(todoist_token)
    if "error" in tasks:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {tasks['error']}")
        return

    if not tasks:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    response = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:\n"
    for idx, task in enumerate(tasks):
        response += f"{idx + 1}. {task['content']} (ID: {task['id']})\n"
    bot.send_message(chat_id, response)


def delete_todoist_task(token, task_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á—É."""
    url = f"https://api.todoist.com/rest/v2/tasks/{task_id}"
    headers = {
        "Authorization": f"Bearer {token}"
    }
    response = requests.delete(url, headers=headers)

    if response.status_code == HTTP_NO_CONTENT:
        return True
    else:
        return {"error": response.text}


def process_task_deletion(message, tasks):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    chat_id = message.chat.id
    todoist_token = get_user_token(chat_id, "todoist_token")

    try:
        selected_index = int(message.text.strip()) - 1
        if 0 <= selected_index < len(tasks):
            task_id = tasks[selected_index]["id"]
            success = delete_todoist_task(todoist_token, task_id)
            if success is True:
                bot.send_message(chat_id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {success['error']}")
        else:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")


@bot.message_handler(commands=['delete_task'])
def delete_task(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_task."""
    chat_id = message.chat.id
    todoist_token = get_user_token(chat_id, "todoist_token")

    if not todoist_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Todoist. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    tasks = get_todoist_tasks(todoist_token)
    if "error" in tasks:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {tasks['error']}")
        return

    if not tasks:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    response = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for idx, task in enumerate(tasks):
        response += f"{idx + 1}. {task['content']} (ID: {task['id']})\n"
    bot.send_message(chat_id, response)

    bot.register_next_step_handler(message, process_task_deletion, tasks)


# ======== GOOGLE ========
@bot.message_handler(commands=['add_event'])
def add_event(message):
    chat_id = message.chat.id
    google_token = get_user_token(chat_id, "google_token")

    if not google_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏:")
    bot.register_next_step_handler(message, process_event_details_nlp)


@bot.message_handler(commands=['list_events'])
def list_events(message):
    chat_id = message.chat.id
    google_token = get_user_token(chat_id, "google_token")

    if not google_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    try:
        events = googleapi.list_google_events(google_token)
        if not events:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
        else:
            response = "–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                response += f"- {event['summary']} ({start})\n"
            bot.send_message(chat_id, response)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}")


@bot.message_handler(commands=['delete_event'])
def delete_event_start(message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    chat_id = message.chat.id
    google_token = get_user_token(chat_id, "google_token")

    if not google_token:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup.")
        return

    try:
        events = googleapi.list_google_events(google_token)
        if not events:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        event_list = "–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for idx, event in enumerate(events, start=1):
            start = event['start'].get('dateTime', event['start'].get('date'))
            event_list += f"{idx}. {event['summary']} ({start})\n"

        bot.send_message(chat_id, event_list)
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É.")
        bot.register_next_step_handler(message, process_event_deletion, events)

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {str(e)}")


def process_event_deletion(message, events):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    chat_id = message.chat.id
    google_token = get_user_token(chat_id, "google_token")

    try:
        text = message.text.lower()
        parts = text.split()
        if len(parts) != 1 or not parts[0].isdigit():
            bot.send_message(chat_id,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: '2'.")
            return

        event_index = int(parts[0]) - 1
        if event_index < 0 or event_index >= len(events):
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        event_id = events[event_index]['id']
        googleapi.delete_google_event(google_token, event_id)

        bot.send_message(chat_id, f"–°–æ–±—ã—Ç–∏–µ '{events[event_index]['summary']}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")


# ======== YANDEX LLM ========
YANDEX_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"


def form_payload(request_text, google_todoist):
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex LLM API."""
    if google_todoist:
        return json.dumps({
            "modelUri": MODEL_URI,
            "completionOptions": DEFAULT_COMPLETION_OPTIONS,
            "messages": [
                {
                    "role": "system",
                    "text": SYSTEM_MESSAGE_GOOGLE
                },
                {
                    "role": "user",
                    "text": request_text
                }
            ]
        })
    return json.dumps({
        "modelUri": MODEL_URI,
        "completionOptions": DEFAULT_COMPLETION_OPTIONS,
        "messages": [
            {
                "role": "system",
                "text": SYSTEM_MESSAGE_TODOIST
            },
            {
                "role": "user",
                "text": request_text
            }
        ]
    })


def extract_event_details(request_text, google_todoist):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Yandex LLM API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞."""
    headers = {
        "Authorization": f"Bearer {YANDEX_IAM_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = form_payload(request_text, google_todoist)
    response = requests.post(YANDEX_API_URL, headers=headers, data=payload)

    if response.status_code == 200:
        result = response.json()
        text = result['result']['alternatives'][0]['message']['text']

        return parse_event_text(text)
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex LLM API: {response.status_code} {response.text}")


def parse_event_text(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Yandex LLM."""
    print(text)
    title_match = re.search(r"(?:–°–æ–±—ã—Ç–∏–µ:|–ó–∞–¥–∞—á–∞:) (.+?)\.", text)
    start_time_match = re.search(r"–ù–∞—á–∞–ª–æ: (.+?)\–ö", text)
    end_time_match = re.search(r"–ö–æ–Ω–µ—Ü: ([\d\-T:\+]+)", text)

    title = title_match.group(1) if title_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
    start_time = start_time_match.group(1) if start_time_match else None
    end_time = end_time_match.group(1) if end_time_match else None

    if start_time and not re.match(r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}", start_time):
        start_time = convert_relative_to_iso(start_time)
    if end_time and not re.match(r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}", end_time):
        end_time = convert_relative_to_iso(end_time)
    return {"title": title, "start_time": start_time, "end_time": end_time}

def convert_relative_to_iso(time_str):
    now = datetime.now()
    if time_str[-1] == '.':
        time_str = time_str[:-2]
    if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in time_str:
        target_date = now + timedelta(days=DELTA_AFTER_TOMORROW)
    elif "–∑–∞–≤—Ç—Ä–∞" in time_str:
        target_date = now + timedelta(days=DELTA_TOMORROW)
    elif "—Å–µ–≥–æ–¥–Ω—è" in time_str:
        target_date = now
    elif re.search(WEEKDAY_R, time_str):
        weekdays = {
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2, "—á–µ—Ç–≤–µ—Ä–≥": 3,
            "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
        }
        weekday_name = re.search(WEEKDAY_R, time_str).group(1)
        target_weekday = weekdays[weekday_name]
        current_weekday = now.weekday()

        days_ahead = (target_weekday - current_weekday + 7) % 7
        if days_ahead == 0:
            days_ahead = DAYS_IN_WEEK
        target_date = now + timedelta(days=days_ahead)
    elif re.search(MONTH_R, time_str):
        month_map = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
            "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        day, month_name = re.search(MONTH_R, time_str).groups()
        month = month_map[month_name]
        target_date = now.replace(day=int(day), month=month, hour=0, minute=0, second=0, microsecond=0)
    elif re.match(DATE_R, time_str):
        data = time_str.split(",")
        if len(data) == 1:
            data = time_str.split(" ")
        day, month, year = map(int, data[0].split("."))
        hour, minute = map(int, data[1].split(":"))
        dt = datetime(year, month, day, hour, minute)
        return dt.isoformat()
    else:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: {time_str}")

    time_match = re.search(TIME_R, time_str)
    if time_match:
        target_time = time_match.group()
        target_datetime = datetime.strptime(f"{target_date.date()} {target_time}", "%Y-%m-%d %H:%M")
    else:
        target_datetime = target_date.replace(hour=0, minute=0)

    return target_datetime.replace(microsecond=0).isoformat()

def process_event_details_nlp(message):
    chat_id = message.chat.id
    google_token = get_user_token(chat_id, "google_token")
    user_input = message.text.strip()

    try:
        event_data = extract_event_details(user_input, True)

        if not event_data.get("title") or not event_data.get("start_time"):
            bot.send_message(chat_id,
                             "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –µ—â–µ —Ä–∞–∑.")
            bot.register_next_step_handler(message, process_event_details_nlp)
            return

        summary = event_data.get("title")
        start_time_str = event_data.get("start_time")
        end_time_str = event_data.get("end_time") or start_time_str

        start_time = googleapi.parse_datetime_to_iso(start_time_str)
        end_time = googleapi.parse_datetime_to_iso(end_time_str)

        event = googleapi.create_google_event(google_token, summary, start_time, end_time)
        bot.send_message(chat_id, f"–°–æ–±—ã—Ç–∏–µ '{event['summary']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Calendar.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}")


# ======== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞ ========

def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)


def start_telegram_bot():
    bot.polling(none_stop=True)


if __name__ == "__main__":
    threading.Thread(target=start_fastapi).start()
    threading.Thread(target=start_telegram_bot).start()

import signal

def handle_exit(signum, frame):
    bot.stop_polling()
    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    exit(0)

signal.signal(signal.SIGINT, handle_exit)
signal.signal(signal.SIGTERM, handle_exit)
